{"config":{"lang":["ja"],"separator":"[\\s\\-\u3000\u3001\u3002\uff0c\uff0e]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"About BookList","text":""},{"location":"#install","title":"Install","text":"<pre><code>pip install nicegui-book_list\n</code></pre>"},{"location":"#start","title":"Start","text":"<pre><code>book list\n</code></pre>"},{"location":"#features","title":"Features","text":"<ul> <li>Add Author</li> <li>Delete Author</li> <li>Add Book</li> <li>Delete Book</li> </ul>"},{"location":"book_list/","title":"Python","text":"<p>Book List</p>"},{"location":"book_list/#src.nicegui_book_list.Author","title":"<code>Author</code>","text":"<p>               Bases: <code>Model</code></p> <p>\u8457\u8005\u30e2\u30c7\u30eb</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>IntField</code> <p>\u4e3b\u30ad\u30fc</p> <code>name</code> <code>CharField</code> <p>\u8457\u8005\u540d</p> Source code in <code>src/nicegui_book_list/models.py</code> <pre><code>class Author(models.Model):\n    \"\"\"\u8457\u8005\u30e2\u30c7\u30eb\n\n    :ivar id: \u4e3b\u30ad\u30fc\n    :ivar name: \u8457\u8005\u540d\n    \"\"\"\n\n    id: fields.IntField = fields.IntField(primary_key=True)\n    name: fields.CharField = fields.CharField(max_length=255)\n</code></pre>"},{"location":"book_list/#src.nicegui_book_list.AuthorList","title":"<code>AuthorList</code>","text":"<p>               Bases: <code>ListBase</code></p> <p>\u8457\u8005\u30ea\u30b9\u30c8\u306eGUI</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>input</code> <p>\u30e2\u30c7\u30eb\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u7528</p> <code>model</code> <code>Model</code> <p>\u5bfe\u8c61\u30e2\u30c7\u30eb</p> Source code in <code>src/nicegui_book_list/ui.py</code> <pre><code>class AuthorList(ListBase):\n    \"\"\"\u8457\u8005\u30ea\u30b9\u30c8\u306eGUI\n\n    :ivar name: \u30e2\u30c7\u30eb\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u7528\n    :cvar model: \u5bfe\u8c61\u30e2\u30c7\u30eb\n    \"\"\"\n\n    name: ui.input\n    model: ClassVar[Model] = models.Author\n\n    @ui.refreshable\n    async def build(self) -&gt; None:\n        \"\"\"GUI\u4f5c\u6210\"\"\"\n        super().build()\n        authors: list[models.Author] = await models.Author.all()\n        with self.list_ui:\n            with self.add_ui:\n                self.name = ui.input(label=\"Name\").on(\"keydown.enter\", self.keydown_enter)\n            for author in reversed(authors):\n                with ui.card(), ui.row().classes(\"items-center\"):\n                    ui.input(\"Name\", on_change=author.save).bind_value(author, \"name\").on(\"blur\", self.build.refresh)\n                    ui.button(icon=\"delete\", on_click=lambda a=author: self.delete(a)).props(\"flat\")\n\n    async def check(self) -&gt; bool:\n        \"\"\"\u5165\u529b\u30c1\u30a7\u30c3\u30af\"\"\"\n        if not self.name.value:\n            ui.notify(\"Specify name\")\n            return False\n        return True\n</code></pre>"},{"location":"book_list/#src.nicegui_book_list.AuthorList.build","title":"<code>build()</code>  <code>async</code>","text":"<p>GUI\u4f5c\u6210</p> Source code in <code>src/nicegui_book_list/ui.py</code> <pre><code>@ui.refreshable\nasync def build(self) -&gt; None:\n    \"\"\"GUI\u4f5c\u6210\"\"\"\n    super().build()\n    authors: list[models.Author] = await models.Author.all()\n    with self.list_ui:\n        with self.add_ui:\n            self.name = ui.input(label=\"Name\").on(\"keydown.enter\", self.keydown_enter)\n        for author in reversed(authors):\n            with ui.card(), ui.row().classes(\"items-center\"):\n                ui.input(\"Name\", on_change=author.save).bind_value(author, \"name\").on(\"blur\", self.build.refresh)\n                ui.button(icon=\"delete\", on_click=lambda a=author: self.delete(a)).props(\"flat\")\n</code></pre>"},{"location":"book_list/#src.nicegui_book_list.AuthorList.check","title":"<code>check()</code>  <code>async</code>","text":"<p>\u5165\u529b\u30c1\u30a7\u30c3\u30af</p> Source code in <code>src/nicegui_book_list/ui.py</code> <pre><code>async def check(self) -&gt; bool:\n    \"\"\"\u5165\u529b\u30c1\u30a7\u30c3\u30af\"\"\"\n    if not self.name.value:\n        ui.notify(\"Specify name\")\n        return False\n    return True\n</code></pre>"},{"location":"book_list/#src.nicegui_book_list.Book","title":"<code>Book</code>","text":"<p>               Bases: <code>Model</code></p> <p>\u66f8\u7c4d\u30e2\u30c7\u30eb</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>IntField</code> <p>\u4e3b\u30ad\u30fc</p> <code>author</code> <code>ForeignKeyField</code> <p>\u8457\u8005</p> <code>title</code> <code>CharField</code> <p>\u66f8\u7c4d\u540d</p> Source code in <code>src/nicegui_book_list/models.py</code> <pre><code>class Book(models.Model):\n    \"\"\"\u66f8\u7c4d\u30e2\u30c7\u30eb\n\n    :ivar id: \u4e3b\u30ad\u30fc\n    :ivar author: \u8457\u8005\n    :ivar title: \u66f8\u7c4d\u540d\n    \"\"\"\n\n    id: fields.IntField = fields.IntField(primary_key=True)\n    author: fields.ForeignKeyField = fields.ForeignKeyField(\"models.Author\", related_name=\"books\")\n    title: fields.CharField = fields.CharField(max_length=255)\n</code></pre>"},{"location":"book_list/#src.nicegui_book_list.BookList","title":"<code>BookList</code>","text":"<p>               Bases: <code>ListBase</code></p> <p>\u66f8\u7c4d\u30ea\u30b9\u30c8\u306eGUI</p> <p>Attributes:</p> Name Type Description <code>author_id</code> <code>select</code> <p>\u30e2\u30c7\u30eb\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u7528</p> <code>title</code> <code>input</code> <p>\u30e2\u30c7\u30eb\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u7528</p> <code>model</code> <code>Model</code> <p>\u5bfe\u8c61\u30e2\u30c7\u30eb</p> Source code in <code>src/nicegui_book_list/ui.py</code> <pre><code>class BookList(ListBase):\n    \"\"\"\u66f8\u7c4d\u30ea\u30b9\u30c8\u306eGUI\n\n    :ivar author_id: \u30e2\u30c7\u30eb\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u7528\n    :ivar title: \u30e2\u30c7\u30eb\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u7528\n    :cvar model: \u5bfe\u8c61\u30e2\u30c7\u30eb\n    \"\"\"\n\n    author_id: ui.select\n    title: ui.input\n    model: ClassVar[Model] = models.Book\n\n    @ui.refreshable\n    async def build(self) -&gt; None:\n        \"\"\"GUI\u4f5c\u6210\"\"\"\n        super().build()\n        authors: list[models.Author] = await models.Author.all()\n        books: list[models.Book] = await models.Book.all()\n        with self.list_ui:\n            with self.add_ui:\n                self.author_id = ui.select({author.id: author.name for author in authors}, label=\"Author\")\n                self.title = ui.input(label=\"Title\").on(\"keydown.enter\", self.keydown_enter)\n            for book in reversed(books):\n                author = await book.author\n                with ui.card(), ui.row().classes(\"items-center\"):\n                    ui.label(author.name)\n                    ui.input(\"Title\", on_change=book.save).bind_value(book, \"title\").on(\"blur\", self.build.refresh)\n                    ui.button(icon=\"delete\", on_click=lambda a=book: self.delete(a)).props(\"flat\")\n\n    async def check(self) -&gt; bool:\n        \"\"\"\u5165\u529b\u30c1\u30a7\u30c3\u30af\"\"\"\n        if not self.title.value:\n            ui.notify(\"Specify title\")\n            return False\n        if not await models.Author.exists(id=self.author_id.value):\n            ui.notify(\"Select author\")\n            return False\n        return True\n</code></pre>"},{"location":"book_list/#src.nicegui_book_list.BookList.build","title":"<code>build()</code>  <code>async</code>","text":"<p>GUI\u4f5c\u6210</p> Source code in <code>src/nicegui_book_list/ui.py</code> <pre><code>@ui.refreshable\nasync def build(self) -&gt; None:\n    \"\"\"GUI\u4f5c\u6210\"\"\"\n    super().build()\n    authors: list[models.Author] = await models.Author.all()\n    books: list[models.Book] = await models.Book.all()\n    with self.list_ui:\n        with self.add_ui:\n            self.author_id = ui.select({author.id: author.name for author in authors}, label=\"Author\")\n            self.title = ui.input(label=\"Title\").on(\"keydown.enter\", self.keydown_enter)\n        for book in reversed(books):\n            author = await book.author\n            with ui.card(), ui.row().classes(\"items-center\"):\n                ui.label(author.name)\n                ui.input(\"Title\", on_change=book.save).bind_value(book, \"title\").on(\"blur\", self.build.refresh)\n                ui.button(icon=\"delete\", on_click=lambda a=book: self.delete(a)).props(\"flat\")\n</code></pre>"},{"location":"book_list/#src.nicegui_book_list.BookList.check","title":"<code>check()</code>  <code>async</code>","text":"<p>\u5165\u529b\u30c1\u30a7\u30c3\u30af</p> Source code in <code>src/nicegui_book_list/ui.py</code> <pre><code>async def check(self) -&gt; bool:\n    \"\"\"\u5165\u529b\u30c1\u30a7\u30c3\u30af\"\"\"\n    if not self.title.value:\n        ui.notify(\"Specify title\")\n        return False\n    if not await models.Author.exists(id=self.author_id.value):\n        ui.notify(\"Select author\")\n        return False\n    return True\n</code></pre>"},{"location":"book_list/#src.nicegui_book_list.ListBase","title":"<code>ListBase</code>","text":"<p>               Bases: <code>ABC</code>, <code>element</code></p> <p>\u8457\u8005\u30ea\u30b9\u30c8\u3068\u66f8\u7c4d\u30ea\u30b9\u30c8\u306eGUI\u306e\u57fa\u5e95\u30af\u30e9\u30b9</p> <p>Attributes:</p> Name Type Description <code>label</code> <code>str</code> <p>ui\u306e\u898b\u51fa\u3057</p> <code>refs</code> <code>set[ListBase]</code> <p>\u4e00\u7dd2\u306brefresh\u3059\u308b\u3082\u306e</p> <code>fields</code> <code>set[str]</code> <p>\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u96c6\u5408</p> <code>list_ui</code> <code>column</code> <p>build\u6642\u306e\u4e00\u89a7\u7528\u306e\u30b3\u30f3\u30c6\u30ca</p> <code>add_ui</code> <code>row</code> <p>build\u6642\u306e\u8ffd\u52a0\u5165\u529b\u7528\u306e\u30b3\u30f3\u30c6\u30ca</p> <code>model</code> <code>Model</code> <p>\u5bfe\u8c61\u30e2\u30c7\u30eb</p> Source code in <code>src/nicegui_book_list/ui.py</code> <pre><code>class ListBase(ABC, ui.element):\n    \"\"\"\u8457\u8005\u30ea\u30b9\u30c8\u3068\u66f8\u7c4d\u30ea\u30b9\u30c8\u306eGUI\u306e\u57fa\u5e95\u30af\u30e9\u30b9\n\n    :ivar label: ui\u306e\u898b\u51fa\u3057\n    :ivar refs: \u4e00\u7dd2\u306brefresh\u3059\u308b\u3082\u306e\n    :ivar fields: \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u96c6\u5408\n    :ivar list_ui: build\u6642\u306e\u4e00\u89a7\u7528\u306e\u30b3\u30f3\u30c6\u30ca\n    :ivar add_ui: build\u6642\u306e\u8ffd\u52a0\u5165\u529b\u7528\u306e\u30b3\u30f3\u30c6\u30ca\n    :cvar model: \u5bfe\u8c61\u30e2\u30c7\u30eb\n    \"\"\"\n\n    label: str\n    refs: set[\"ListBase\"]\n    fields: set[str]\n    list_ui: ui.column\n    add_ui: ui.row\n    model: ClassVar[Model]\n\n    def __init__(self, *, label: str, refs: set[\"ListBase\"] | None = None) -&gt; None:\n        \"\"\"\u521d\u671f\u5316\"\"\"\n        self.label = label\n        self.refs = refs or set()\n        self.fields: set[str] = self.model.all().fields - {\"id\"}\n\n    @ui.refreshable\n    def build(self) -&gt; None:\n        \"\"\"GUI\u4f5c\u6210\"\"\"\n        self.list_ui = ui.column().classes(\"mx-auto\")\n        with self.list_ui:\n            ui.label(self.label).classes(\"text-2xl\")\n            with ui.row().classes(\"w-full items-center px-4\"):\n                self.add_ui = ui.row()\n                ui.button(on_click=self.create, icon=\"add\").props(\"flat\").classes(\"ml-auto\")\n\n    def refresh(self) -&gt; None:\n        \"\"\"\u6700\u65b0\u5316\"\"\"\n        self.build.refresh()\n        for ref in self.refs:\n            ref.build.refresh()\n\n    @abstractmethod\n    async def check(self) -&gt; bool:\n        \"\"\"\u5165\u529b\u30c1\u30a7\u30c3\u30af\"\"\"\n\n    async def create(self) -&gt; None:\n        \"\"\"\u8ffd\u52a0\"\"\"\n        if await self.check():\n            await self.model.create(**{field: getattr(self, field).value for field in self.fields})\n            self.refresh()\n\n    async def keydown_enter(self, event: events.GenericEventArguments) -&gt; None:\n        \"\"\"Enter\u30ad\u30fc\u62bc\u4e0b\"\"\"\n        if not event.args.get(\"isComposing\"):  # IME\u5909\u63db\u3067\u306a\u3044\u3068\u304d\n            await self.create()\n\n    async def delete(self, record: Model) -&gt; None:\n        \"\"\"\u524a\u9664\"\"\"\n        await record.delete()\n        self.refresh()\n</code></pre>"},{"location":"book_list/#src.nicegui_book_list.ListBase.__init__","title":"<code>__init__(*, label, refs=None)</code>","text":"<p>\u521d\u671f\u5316</p> Source code in <code>src/nicegui_book_list/ui.py</code> <pre><code>def __init__(self, *, label: str, refs: set[\"ListBase\"] | None = None) -&gt; None:\n    \"\"\"\u521d\u671f\u5316\"\"\"\n    self.label = label\n    self.refs = refs or set()\n    self.fields: set[str] = self.model.all().fields - {\"id\"}\n</code></pre>"},{"location":"book_list/#src.nicegui_book_list.ListBase.build","title":"<code>build()</code>","text":"<p>GUI\u4f5c\u6210</p> Source code in <code>src/nicegui_book_list/ui.py</code> <pre><code>@ui.refreshable\ndef build(self) -&gt; None:\n    \"\"\"GUI\u4f5c\u6210\"\"\"\n    self.list_ui = ui.column().classes(\"mx-auto\")\n    with self.list_ui:\n        ui.label(self.label).classes(\"text-2xl\")\n        with ui.row().classes(\"w-full items-center px-4\"):\n            self.add_ui = ui.row()\n            ui.button(on_click=self.create, icon=\"add\").props(\"flat\").classes(\"ml-auto\")\n</code></pre>"},{"location":"book_list/#src.nicegui_book_list.ListBase.check","title":"<code>check()</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>\u5165\u529b\u30c1\u30a7\u30c3\u30af</p> Source code in <code>src/nicegui_book_list/ui.py</code> <pre><code>@abstractmethod\nasync def check(self) -&gt; bool:\n    \"\"\"\u5165\u529b\u30c1\u30a7\u30c3\u30af\"\"\"\n</code></pre>"},{"location":"book_list/#src.nicegui_book_list.ListBase.create","title":"<code>create()</code>  <code>async</code>","text":"<p>\u8ffd\u52a0</p> Source code in <code>src/nicegui_book_list/ui.py</code> <pre><code>async def create(self) -&gt; None:\n    \"\"\"\u8ffd\u52a0\"\"\"\n    if await self.check():\n        await self.model.create(**{field: getattr(self, field).value for field in self.fields})\n        self.refresh()\n</code></pre>"},{"location":"book_list/#src.nicegui_book_list.ListBase.delete","title":"<code>delete(record)</code>  <code>async</code>","text":"<p>\u524a\u9664</p> Source code in <code>src/nicegui_book_list/ui.py</code> <pre><code>async def delete(self, record: Model) -&gt; None:\n    \"\"\"\u524a\u9664\"\"\"\n    await record.delete()\n    self.refresh()\n</code></pre>"},{"location":"book_list/#src.nicegui_book_list.ListBase.keydown_enter","title":"<code>keydown_enter(event)</code>  <code>async</code>","text":"<p>Enter\u30ad\u30fc\u62bc\u4e0b</p> Source code in <code>src/nicegui_book_list/ui.py</code> <pre><code>async def keydown_enter(self, event: events.GenericEventArguments) -&gt; None:\n    \"\"\"Enter\u30ad\u30fc\u62bc\u4e0b\"\"\"\n    if not event.args.get(\"isComposing\"):  # IME\u5909\u63db\u3067\u306a\u3044\u3068\u304d\n        await self.create()\n</code></pre>"},{"location":"book_list/#src.nicegui_book_list.ListBase.refresh","title":"<code>refresh()</code>","text":"<p>\u6700\u65b0\u5316</p> Source code in <code>src/nicegui_book_list/ui.py</code> <pre><code>def refresh(self) -&gt; None:\n    \"\"\"\u6700\u65b0\u5316\"\"\"\n    self.build.refresh()\n    for ref in self.refs:\n        ref.build.refresh()\n</code></pre>"}]}